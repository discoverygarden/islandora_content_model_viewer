<?php

// $Id$

/**
 * @file
 *
 * Implements hooks and callbacks for this module.
 */
module_load_include('inc', 'content_model_viewer', 'content_model_viewer.db'); // Helper functions/constants for database.

/**
 * Constants
 */
define("PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS", 'View Objects & Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES", 'Modify Object Properties');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS", 'Purge Objects');
define("PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS", 'Add Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS", 'Purge Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS", 'Download Datastreams');
define("PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES", 'Modify Datastream Properties');

/**
 * Implements Menu Hook. Registers Menus.
 */
function content_model_viewer_menu() {
  $items['viewer/%'] = array(
    'title' => t('Content Model Viewer'),
    'description' => t('Allows users to view Fedora Objects.'),
    'page callback' => 'content_model_viewer',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['viewer/%/members'] = array(
    'page callback' => 'content_model_viewer_members',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/properties'] = array(
    'page callback' => 'content_model_viewer_properties',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/datastreams/%'] = array(
    'page callback' => 'content_model_viewer_datastreams',
    'page arguments' => array(1, 3),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/overview'] = array(
    'page callback' => 'content_model_viewer_overview',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_object',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/add'] = array(
    'page callback' => 'content_model_viewer_add_datastream',
    'page arguments' => array(1),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/purge'] = array(
    'page callback' => 'content_model_viewer_purge_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/download'] = array(
    'page callback' => 'content_model_viewer_download_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS),
    'type' => MENU_CALLBACK,
  );
  $items['viewer/%/%/view'] = array(
    'page callback' => 'content_model_viewer_view_datastream',
    'page arguments' => array(1, 2),
    'access arguments' => array(PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/content_model_viewer'] = array(
    'title' => t('Content Model Viewer Settings'),
    'description' => t('Settings for the Content Model Viewer.'),
    'page callback' => 'theme',
    'page arguments' => array('content_model_viewer_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'content_model_viewer.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/content_model_viewer/%/edit'] = array(
    'title' => t('Content Model Viewer Settings'),
    'description' => t('Settings for the Contet Model Viewer.'),
    'file' => 'content_model_viewer.admin.inc',
    'page callback' => 'theme',
    'page arguments' => array('content_model_viewer_custom_settings', 3),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/content_model_viewer/form/autocomplete/models'] = array(
    'page callback' => 'content_model_viewer_autocomplete_models',
    'access arguments' => array('administer site configuration'),
    'file' => 'content_model_viewer.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 * 
 * @param array $items 
 */
function content_model_viewer_menu_alter(&$items) {
  $items['fedora']['page callback'] = 'content_model_viewer';
  $items['fedora/repository']['page callback'] = 'content_model_viewer';
}

/**
 * Implements hook_perm. Register permissions.
 *
 * @return array
 */
function content_model_viewer_perm() {
  return array(
    PERM_CONTENT_MODEL_VIEWER_VIEW_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
    PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
    PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_DOWNLOAD_DATASTREAMS,
    PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES
  );
}

/**
 * Implements Hook Theme. Registers themes.
 *
 * @return array
 */
function content_model_viewer_theme() {
  return array(
    'content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'Viewer',
    ),
    'content_model_viewer_metadata_form' => array(
      'arguments' => array('pid' => NULL, 'action' => NULL),
      'template' => 'Form',
    ),
    'content_model_viewer_settings' => array(
      'template' => 'templates/Settings',
    ),
    'content_model_viewer_custom_settings' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'templates/CustomSettings',
    ),
    'default_content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'file' => 'models/Default.inc',
      'template' => 'models/Default',
    ),
    'field_book_content_model_viewer' => array(
      'arguments' => array('pid' => NULL),
      'template' => 'models/Default',
    ),
    'content_model_viewer_form_table' => array(
      'arguments' => array('element' => NULL)
    )
  );
}

/**
 * 'content_model_datastream_viewers' Hook implementation. 
 * 
 * Lists all the datastream viewers
 */
function content_model_viewer_content_model_datastream_viewers() {
  /**
   * @todo make is so that no Classes need to be created and all the information is included
   * in this array...
   */
  $flexpaper = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/FlexPaper',
    'class' => 'FlexPaperViewer',
  );
  $xml = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/XML',
    'class' => 'XMLDatastreamViewer',
  );
  $image_basic = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/BasicImageViewer',
    'class' => 'BasicImageViewer',
  );
  $image_djatoka = array(// Adore Djatoka is required. Should check the content model for service def or something.
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/Djatoka',
    'class' => 'DjatokaViewer',
  );
  $text = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'viewers/TextViewer',
    'class' => 'TextViewer',
  );
  return array(
    'application/x-shockwave-flash' => $flexpaper,
    'application/shockwave-flash' => $flexpaper,
    'text/xml' => $xml,
    'text/plain' => $text,
    'application/rdf+xml' => $xml,
    'image/jpeg' => $image_basic,
    'image/gif' => $image_basic,
    'image/jp2' => $image_basic,
    'image/jpeg' => $image_basic,
    'image/png' => $image_basic,
    'image/raw' => $image_basic,
    'image/tiff' => $image_basic,
    'image/tif' => $image_basic,
  );
}

/**
 * Loads all the installed module classes.
 */
function content_model_viewer_include_content_models() {
  $include_path = drupal_get_path('module', 'content_model_viewer') . "/models";
  $dir = opendir($include_path);
  if ($dir !== false) {
    while (($file = readdir($dir)) !== false) {
      if (preg_match('/\.inc$/', $file)) {
        require_once "$include_path/$file";
      }
    }
  }
  closedir($dir);
}

/**
 * Get the list of installed ContentModelViewer classes.
 */
function content_model_viewer_get_models() {
  $models = array();
  $classes = get_declared_classes();
  foreach ($classes as $class) {
    if ($class instanceof ContentModelViewer) {
      $models[] = $class;
    }
  }
  return $models;
}

/**
 * Loads all the installed viewer classes.
 */
function content_model_viewer_include_viewers() {
  $include_path = drupal_get_path('module', 'content_model_viewer') . "/viewers";
  $dir = opendir($include_path);
  if ($dir !== false) {
    while (($file = readdir($dir)) !== false) {
      if (preg_match('/\.inc$/', $file)) {
        require_once "$include_path/$file";
      }
    }
  }
  closedir($dir);
}

/**
 * Hook for register_content_models_for_viewer
 * 
 * @return array
 */
function content_model_viewer_register_content_models_for_viewer() {
  $models = array();
  $models['si:fieldbooks'] = array(
    'type' => 'inc',
    'module' => 'content_model_viewer',
    'file' => 'FieldBooks',
    'class' => 'FieldBookModelViewer'
  );
  return $models;
}

/**
 * Gets an instance of a content model viewer.
 * 
 * @param string $pid
 * 
 * @return object
 *   An instance of the Content Model Viewer if found. Otherwise it returns
 *   the default content model viewer.
 */
function content_model_viewer_get_registered_content_model_viewer($pid) {
  $model_pid = content_model_viewer_get_content_model_pid($pid);
  $models = module_invoke_all('register_content_models_for_viewer');
  foreach ($models as $key => $model) {
    if ($key == $model_pid) {
      module_load_include($model['type'], $model['module'], $model['file']);
      $class = $model['class'];
      return new $class($pid);
    }
  }
  module_load_include('inc', 'content_model_viewer', 'models/Default');
  return new DefaultModelViewer($pid);
}

/**
 * Checks if there is a registered Content Model Viewer for the given Object.
 * 
 * @param string $pid
 *   The Fedora Objects pid.
 * 
 * @return boolean 
 *   TRUE if there is a registered Content Model Viewer.
 */
function content_model_viewer_has_registered_content_model_viewer($pid) {
  $model_pid = content_model_viewer_get_content_model_pid($pid);
  $models = module_invoke_all('register_content_models_for_viewer');
  foreach ($models as $key => $model) {
    if ($key == $model_pid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Get the pid of this objects content model.
 * 
 * @param string $pid
 * 
 * @return string
 */
function content_model_viewer_get_content_model_pid($pid) {
  module_load_include('inc', 'fedora_repository', 'ContentModel');
  $content_model = ContentModel::loadFromObject($pid);
  return $content_model->pid;
}

/**
 * Gets the Supported Viewers.
 * 
 * @staticvar array $cache
 * @return array
 */
function content_model_viewer_get_supported_viewers() {
  static $cache;
  if (!isset($cache)) {
    $cache = array();
    foreach (module_implements('content_model_datastream_viewers') as $module) {
      $viewers = module_invoke($module, 'content_model_datastream_viewers');
      if (isset($viewers) && is_array($viewers)) {
        $cache = array_merge_recursive($cache, $viewers);
      }
    }
  }
  return $cache;
}

/**
 * Looks for a supported viewer that can view the given MIME type, and gets the viewer properties.
 * 
 * @param string $mime 
 *   A valid MIME Type.
 *
 * @return array
 *   The properties of the viewer if found, NULL otherwise. The format of the properties is defined by the 
 *   content_model_datastream_viewers hook.
 */
function content_model_viewer_get_viewer_properties($mime) {
  $viewers = content_model_viewer_get_supported_viewers();
  foreach ($viewers as $supported_mime_type => $properties) {
    if ($supported_mime_type == $mime) { // @todo make both lower case.
      return $properties;
    }
  }
  return NULL;
}

/**
 * Sets up variables for the template.
 * 
 * @param array $variables
 */
function template_preprocess_content_model_viewer(array &$variables) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $pid = $variables['pid'];
  $item = new Fedora_Item($pid);
  $variables['label'] = $item->objectProfile->objLabel;
  $variables['base_url'] = base_path();
  $variables['width'] = variable_get('content_model_viewer_width', 740);
  $variables['height'] = variable_get('content_model_viewer_height', 800);
  $variables['dsid'] = 'SWF';
  $variables['view_function'] = 'loadFlexPlayer';
  $variables['paths'] = array(
    'object' => array(
      'overview' => "viewer/$pid/overview",
      'properties' => "viewer/$pid/properties",
      'datastreams' => "viewer/$pid/datastreams",
      'members' => "viewer/$pid/members",
      'purge' => "viewer/$pid/purge"
    ),
    'datastream' => array(
      'add' => "viewer/$pid/add",
      'purge' => "viewer/$pid/dsid/purge",
      'properties' => "viewer/$pid/dsid/properties",
      'download' => "viewer/$pid/dsid/download",
      'view' => "viewer/$pid/dsid/view"
    )
  );
  // store details of the object's content model(s)
  $model_pids = $item->objectProfile->objModels->model;
  $models = array();
  foreach($model_pids as $model_pid) {
    $models[] = array_pop(preg_split('/\//',$model_pid));
  }
  $variables['models'] = join($models,' ');
}

/**
 * Renders the Viewer for a given pid if possible.
 *
 * @param string $pid
 */
function content_model_viewer($pid = NULL) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  // Copied from islandora.
  if (!fedora_available()) {
    drupal_set_message(t('The Fedora repository server is currently unavailable. Please contact the site administrator.'), 'warning', FALSE);
    return '';
  }
  if (function_exists('risearch_available') && !risearch_available()) {
    drupal_set_message(t('The Fedora resource index search is currently unavailable. Please contact the site administrator.'), 'warning', FALSE);
    return '';
  }
  if ($pid == NULL) {
    $pid = variable_get('fedora_repository_pid', 'islandora:root');
  }
  $item = new fedora_item($pid);
  if (!$item->exists()) {
    drupal_not_found();
    exit();
  }
  // End of COPY
  if (!content_model_viewer_has_registered_content_model_viewer($pid)) {
    //Push the call off to Islandora.
    return call_user_func_array('repository_page', func_get_args());
  }
  // End of redirect to old fedora/repository handler
  $pid = isset($pid) ? $pid : variable_get('fedora_repository_pid', 'islandora:root');
  // Add Bread Crumbs
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');
  $breadcrumbs = array();
  $objectHelper = new ObjectHelper();

  $objectHelper->getBreadcrumbs($pid, $breadcrumbs);
  drupal_set_breadcrumb(array_reverse($breadcrumbs));
  // End Add Bread Crumbs
  $path = drupal_get_path('module', 'content_model_viewer');
  $js_path = $path . '/js';
  if (isset($_POST['action'])) { // Render Metadata Form
    $action = $_POST['action'];
    drupal_add_js($js_path . '/Form.js');
    return theme('content_model_viewer_metadata_form', $pid, $action);
  }
  else {
    /* Load ExtJS */
    $ext_path = $path . '/lib/ext';
    drupal_add_js($ext_path . '/ext-all.js');
    //drupal_add_js($ext_path . '/ext-all-debug-w-comments.js');
    drupal_add_css($path . '/css/Clear.css');
    drupal_add_css($ext_path . '/resources/css/ext-all-gray.css', 'theme', 'all');
    /* Load Panels/Widgets */
    drupal_add_js($js_path . '/IncludeFirst.js');
    drupal_add_js($js_path . '/SortButton.js');
    drupal_add_js($js_path . '/OverviewPanel.js');
    drupal_add_js($js_path . '/ViewerPanel.js');
    $manage_permissions = array(
      PERM_CONTENT_MODEL_VIEWER_MODIFY_OBJECT_PROPERTIES,
      PERM_CONTENT_MODEL_VIEWER_PURGE_OBJECTS,
      PERM_CONTENT_MODEL_VIEWER_ADD_DATASTREAMS,
      PERM_CONTENT_MODEL_VIEWER_PURGE_DATASTREAMS,
      PERM_CONTENT_MODEL_VIEWER_MODIFY_DATASTEAM_PROPERTIES
    );
    $show_manage_panel = false;
    foreach ($manage_permissions as $permission) {
      if (user_access($permission)) {
        $show_manage_panel = true;
      }
    }
    if ($show_manage_panel) {
      drupal_add_js($js_path . '/ManagePanel.js');
    }
    if (content_model_viewer_is_object_collection($pid) || content_model_viewer_object_has_members($pid) || content_model_viewer_object_has_collection_model($pid)) {
      drupal_add_js($js_path . '/CollectionPanel.js');
    }
    drupal_add_js($js_path . '/ContentModelViewer.js');
    drupal_add_css($path . '/css/ContentModelViewer.css');
    /* Load Viewers */
    module_load_include('inc', 'content_model_viewer', 'viewers/AbstractViewer');
    module_load_include('inc', 'content_model_viewer', 'models/AbstractModel');
    AbstractViewer::LoadRequiredResourcesForAllViewers();
    AbstractModel::LoadRequiredResourcesFor($pid);
    return theme('content_model_viewer', $pid);
  }
}

/**
 * Returns the HTML for overview panel in the viewer.
 * 
 * @param string $pid 
 * 
 * @return string
 */
function content_model_viewer_overview($pid) {
  $viewer = content_model_viewer_get_registered_content_model_viewer($pid);
  try {
    $data = $viewer->render();
    $func = $viewer->getInitializationFunction();
    $javascript = drupal_add_js(NULL, NULL, 'header');
    $settings = call_user_func_array('array_merge_recursive', $javascript['setting']);
    unset($settings['ahah']['']);
    echo json_encode(array('success' => TRUE, 'data' => $data, 'func' => $func, 'settings' => $settings));
  } catch (Exception $e) {
    drupal_set_message($e->getMessage());
  }
  exit();
}

/**
 * Gets the members of this collection.
 * 
 * @param string $pid 
 */
function content_model_viewer_members($pid) {
  module_load_include('inc', 'content_model_viewer', 'Collection');
  $collection = new Collection($pid);
  list($data, $total) = $collection->getMembers();
  echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
  exit();
  /**
   * Expected Data:
   * 
   * 'link' => $base_url . '/viewer/' . 'coccc:1675',
   * 'label' => 'Some Colorado College Object',
   * 'description' => 'The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the The Colorado College Nugget, formerly the Pikes Peak Nugget from 1900-1941, was issued until 2006-2007. The 1969-1970 Nugget was issued as loose photosheets contained in a box and named the',
   * 'owner' => 'fedoraAdmin',
   * 'created' => '2011-06-17T15:15:57.214Z',
   * 'modified' => '2011-07-15T19:08:16.008Z',
   * 'tn' => '/' . $module_path . '/images/collection.png',
   */
}

/**
 * Get/Set data stream properties for the given Fedora Object.
 * 
 * @param string $pid 
 *   The PID of the Fedora Object, whose data streams this function will get/set.s
 */
function content_model_viewer_datastreams($pid, $dsid = NULL) {
  module_load_include('inc', 'content_model_viewer', 'DatastreamProperties');
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
      $filter = isset($_GET['filter']) ? $_GET['filter'] : FALSE;
      $datastreams = new DatastreamProperties($pid);
      list($data, $total) = $datastreams->get($_GET['start'], $_GET['limit'], $filter);
      echo json_encode(array('success' => TRUE, 'data' => $data, 'total' => $total));
      exit();
    case 'PUT':
      if ($_SERVER['CONTENT_LENGTH'] > 0) {
        $stdin = fopen("php://input", "r");
        $json = fread($stdin, $_SERVER['CONTENT_LENGTH']);
        $data = json_decode($json);
        $datastreams = new DatastreamProperties($pid);
        $data = $datastreams->setProperties($dsid, $data);
        echo json_encode(array('success' => TRUE, 'msg' => "Successfully modified $dsid's properties", 'data' => $data));
        exit();
      }
      break;
  }
}

/**
 * Gets/sets the properties of the object identified by $pid.
 *
 * @param string $pid
 * 
 * @return string
 */
function content_model_viewer_properties($pid) {
  module_load_include('inc', 'content_model_viewer', 'ObjectProperties');
  switch ($_SERVER['REQUEST_METHOD']) {
    case 'GET':
      $object_properties = new ObjectProperties($pid);
      $properties = $object_properties->getProperties();
      echo json_encode(array('success' => TRUE, 'data' => array($properties)));
      exit();
    case 'POST':
      $label = $_POST['label'];
      $owner = $_POST['owner'];
      $state = $_POST['state'];
      $object_properties = new ObjectProperties($pid);
      $success = $object_properties->setProperties($label, $owner, $state);
      $message = $success ? t('Successfuly modified object properties') : t('Failed to modify object properties');
      $properties = $object_properties->getProperties();
      echo json_encode(array('success' => TRUE, 'msg' => $message, 'data' => $properties));
      exit();
  }
}

/**
 * Purges the object identified by $pid.
 *
 * The user will be redirected to the sites home page.
 *
 * @param string $pid 
 *
 * @return string
 */
function content_model_viewer_purge_object($pid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge();
  $message = $success ? t('Successfuly deleted object') : t('Failed to delete object');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Adds a datastream to the object identified by $pid.*
 *
 * @param string $pid 
 *
 * @return string
 */
function content_model_viewer_add_datastream($pid) {
  $values = $_POST;
  $dsid = $_POST['dsid'];
  $label = $_POST['label'];
  $control = $_POST['control']; // Manage
  $file = array_shift($_FILES);
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $success = false;
  if ($file['error'] == UPLOAD_ERR_OK) {
    try {
      $item = new Fedora_Item($pid);
      if (empty($item->datastreams[$dsid])) {
        module_load_include('inc', 'fedora_repository', 'MimeClass');
        $mimetype_helper = new MimeClass();
        $mime = $mimetype_helper->getType($file['name']);
        $success = $item->add_datastream_from_file($file['tmp_name'], $dsid, $label, $mime, $control);
      }
    } catch (Exception $e) {
// log some error...
    }
  }
  $message = $success ? t('Successfully added datastream.') : t('Failed to add datastream.');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Purges the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_purge_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  $success = $item->purge_datastream($dsid);
  $message = $success ? t('Successfully purged datastream.') : t('Failed to purge datastream.');
  echo json_encode(array('success' => $success, 'msg' => $message));
  exit();
}

/**
 * Downloads the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_download_datastream($pid, $dsid) {
  module_load_include('inc', 'content_model_viewer', 'Download');
  download_datastream($pid, $dsid);
}

/**
 * Renders the viewer for the given datastream ($dsid) from the object identified by $pid.
 *
 * @param string $pid 
 * @param string $dsid
 *
 * @return string
 */
function content_model_viewer_view_datastream($pid, $dsid) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  if (isset($item->datastreams[$dsid])) {
    $mime = $item->datastreams[$dsid]['MIMEType'];
    $properties = content_model_viewer_get_viewer_properties($mime);
    if ($properties) {
      module_load_include($properties['type'], $properties['module'], $properties['file']);
      $class = $properties['class'];
      $viewer = new $class();
      echo $viewer->render($pid, $dsid);
      exit();
    }
  }
  echo '<div>' . t('No Viewer Avaliable') . '</div>';
  exit();
}

/**
 * Checks if an object has members.
 * 
 * @param string $pid 
 * 
 * @return boolean
 */
function content_model_viewer_object_has_members($pid) {
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collection = new CollectionClass();
  $results = $collection->getRelatedItems($pid);
  $results = trim($results);
  if ($results != '') {
    $document = new DOMDocument();
    $document->loadXML($results);
    $path = new DOMXPath($document);
    $path->registerNamespace('sparql', 'http://www.w3.org/2001/sw/DataAccess/rf1/result');
    $results = $path->query('//sparql:result');
    $count = $results->length;
    return $count > 0;
  }
  return FALSE;
}

/**
 *
 * @param <type> $pid
 * for this to work an objects cmodel must have a cmodel of islandora:collectionCModel
 */
function content_model_viewer_is_object_collection($pid) {
  $itql_query = 'select $object $title $content from <#ri>
                             where ($object <info:fedora/fedora-system:def/model#label> $title
                             and $object <fedora-model:hasModel> $content
                             and ($content <fedora-model:hasModel> <info:fedora/islandora:collectionCModel>)
                             and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
                             order by $title';
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collection = new CollectionClass();
  $results = $collection->getRelatedItems(NULL, $itql_query);
  $xml = simplexml_load_string($results);
  if (!$xml) {
    drupal_set_message(t('Error getting list of collection objects'), 'error');
    return;
  }
  foreach ($xml->results->result as $result) {
    $a = $result->object->attributes();
    $temp = $a['uri'];
    $object = substr($temp, strrpos($temp, '/') + 1);
    if ($pid === $object) {
      return true;
    }
  }
  return FALSE;
}

/**
 * Checks to see if the content model of the given object is a collection.
 * 
 * Checks for the presence of a COLLECTION_POLICY datastream.
 * 
 * @param string $pid
 *   The object pid.
 * 
 * @return bool
 *   Return TRUE if the object has a collection model.
 */
function content_model_viewer_object_has_collection_model($pid) {
  module_load_include('inc', 'fedora_repository', 'ContentModel');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($pid);
  if ($item->exists()) {
    if (isset($item->datastreams['COLLECTION_POLICY'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 *
 * @param type $pid 
 */
function content_model_viewer_edit_metadata_form(array &$form_state, $pid) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  module_load_include('inc', 'fedora_repository', 'ConnectionHelper');
  $connection_helper = new ConnectionHelper();
  $client = $connection_helper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));
  try {
    $edit_form = new EditObjectMetadataForm();
    $output = $edit_form->create($pid, $client, $form_state);
    $output['action'] = array(
      '#type' => 'hidden',
      '#value' => 'edit'
    );
    return $output;
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
}

/**
 * Validate Edit Form.
 * 
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_edit_metadata_form_validate(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $form_state['storage']['step']++;
    $form_state['rebuild'] = TRUE;
  }
  else {
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    $xml_form->validate($form, $form_state);
  }
}

/**
 * Submit Edit Form.
 * 
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_edit_metadata_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  try {
    $edit_form = new EditObjectMetadataForm();
    $edit_form->submit($form, $form_state);
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    $form_state['rebuild'] = TRUE;
  }
}

function content_model_viewer_ingest_metadata_form(array &$form_state, $collection_pid) {
  if (!user_access('ingest new fedora objects')) {
    drupal_set_message(t('You do not have permission to ingest.'), 'error');
    return FALSE;
  }
  module_load_include('inc', 'fedora_repository', 'SecurityClass');
  $security_class = new SecurityClass();
  if (!$security_class->canIngestHere($collection_pid)) {
// Queries the collection object for a child security datastream and if found parses it
// to determine if this user is allowed to ingest in this collection
// we assume if they are able to modify objects in the collection they can ingest as well.
    drupal_set_message(t('You do not have premission to ingest here.'));
    return FALSE;
  }
  if ($collection_pid == NULL) {
    drupal_set_message(t('You must specify an collection object pid to ingest an object.'), 'error');
    return FALSE;
  }
  module_load_include('inc', 'islandora_content_model_forms', 'IngestObjectMetadataForm');
  try {
    $ingest_form = new IngestObjectMetadataForm();
    $output = $ingest_form->create($collection_pid, NULL, $form_state);
    $output['action'] = array(
      '#type' => 'hidden',
      '#value' => 'ingest'
    );
    return $output;
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
}

/**
 * Validate Ingest Form.
 * 
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_ingest_metadata_form_validate(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $form_state['storage']['step']++;
    $form_state['rebuild'] = TRUE;
  }
  else {
    if (!empty($_FILES['files']['name']['ingest-file-location'])) {
      $file = file_save_upload('ingest-file-location');
      file_move($file->filepath, 0, 'FILE_EXISTS_RENAME');
      $form_state['values']['ingest-file-location'] = $file->filepath;
    }
    if (isset($form_state['values']['ingest-file-location']) && file_exists($form_state['values']['ingest-file-location'])) {
      module_load_include('inc', 'fedora_repository', 'ContentModel');
      module_load_include('inc', 'fedora_repository', 'MimeClass');
      $file = $form_state['values']['ingest-file-location'];
      $content_model_pid = ContentModel::getPidFromIdentifier($form_state['values']['models']);
      $content_model_pid;
      $content_model_dsid = ContentModel::getDSIDFromIdentifier($form_state['values']['models']);
      if (($content_model = ContentModel::loadFromModel($content_model_pid, $content_model_dsid)) !== FALSE) {
        $allowed_mime_types = $content_model->getMimetypes();
        $mimetype = new MimeClass();
        $format = $mimetype->getType($file);
        if (!empty($file)) {
          if (!in_array($format, $allowed_mime_types)) {
            form_set_error('ingest-file-location', t('The uploaded file\'s mimetype (' . $format . ') is not associated with this Content Model. The allowed types are ' .
                    implode(' ', $allowed_mime_types)));
            file_delete($file);
            return;
          }
          elseif (!$content_model->execIngestRules($file, $format)) {
            drupal_set_message(t('Error following Content Model Rules'), 'error');
            foreach (ContentModel::$errors as $error) {
              drupal_set_message($error, 'error');
            }
          }
        }
      }
    }
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    $xml_form->validate($form, $form_state);
  }
}

/**
 * Submit Ingest Form.
 * 
 * @param array $form
 * @param array $form_state
 */
function content_model_viewer_ingest_metadata_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'IngestObjectMetadataForm');
  if ($form_state['storage']['step'] == 2) {
    $ingest_form = new IngestObjectMetadataForm();
    $ingest_form->submit($form, $form_state);
  }
}